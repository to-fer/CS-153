/* Generated By:JavaCC: Do not edit this line. TypeScriptParserDefaultVisitor.java Version 6.1_3 */
package wci.frontend;

public class TypeScriptParserDefaultVisitor implements TypeScriptParserVisitor{
  public Object defaultVisit(SimpleNode node, Object data){
    node.childrenAccept(this, data);
    return data;
  }
  public Object visit(SimpleNode node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTprogram node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTboolean_op node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTLESS_THAN node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTGREATER_THAN node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTLESS_THAN_OR_EQUALS node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTGREATER_THAN_OR_EQUALS node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTEQUALITY node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTNOT_EQUALS node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTOR node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTAND node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTcondition node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTif_body node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTif_stmt node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTif_part node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTelse_part node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTwhile_node node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTCompound_stmt node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTprintln node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTPureFunction node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTFunctionDeclaration node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTFunction_invocation node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTdeclaration node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTAssignment node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTidentifier node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTadd node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTsubtract node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTmultiply node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTdivide node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTboolean_node node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTnumber node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTstring node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTerror node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASThandleError node, Object data){
    return defaultVisit(node, data);
  }
}
/* JavaCC - OriginalChecksum=7a10d412457dec58f60a797992b9d79e (do not edit this line) */
