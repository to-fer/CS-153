/* Generated By:JJTree&JavaCC: Do not edit this line. TypeScriptParser.java */
package wci.frontend;
import java.util.*;
import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import wci.intermediate.icodeimpl.ICodeNodeImpl;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class TypeScriptParser/*@bgen(jjtree)*/implements TypeScriptParserTreeConstants, TypeScriptParserConstants {/*@bgen(jjtree)*/
  protected static JJTTypeScriptParserState jjtree = new JJTTypeScriptParserState();private static SymTabStack symTabStack;
    private static SymTabEntry programId;
        public static boolean generate_code_flag = true;
    public static void main(String[] args)
        throws Exception
    {
        // Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

        String sourceFilePath = args[0];

        // Parse a Typescript program.
        Reader    reader = new FileReader(sourceFilePath);
        TypeScriptParser parser = new TypeScriptParser(reader);
        System.out.println("before program");
        SimpleNode rootNode = parser.program();
        System.out.println("after program");
                rootNode.dump(">");
        // Print the cross-reference table.
                CrossReferencer crossReferencer = new CrossReferencer();
                crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);
                if(generate_code_flag)
                {

                Backend backend = BackendFactory.createBackend("compile");
                backend.process(iCode, symTabStack, objectFileName(sourceFilePath));
                }
                else
                {
                        System.out.println("COULD NOT GENERATE CODE DUE TO SYNTAX ERRORS");
                }
    }

    private static String fileNameWithoutExtension(String fileName) {
        int dotIndex = fileName.lastIndexOf('.');
        return fileName.substring(0, dotIndex);
    }

    private static String objectFileName(String fileName) {
        return fileNameWithoutExtension(fileName) + ".j";
    }

  static final public SimpleNode program() throws ParseException {
    trace_call("program");
    try {
                        /*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        programId = symTabStack.enterLocal("TypeScript");
        programId.setTypeSpec(Predefined.charType);
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        programId.setAttribute(FUNCTIONS_CODE, new ArrayList<SimpleNode>());
        symTabStack.setProgramId(programId);
          System.out.println("before");
        Statement_list();
          System.out.println("before1");
            {if (true) return jjtn000;}
            System.out.println("after");
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          System.out.println("done parsing");
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("program");
    }
  }

/*if statements*/
  static final public void boolean_op() throws ParseException {
    trace_call("boolean_op");
    try {
                     /*@bgen(jjtree) boolean_op */
                     ASTboolean_op jjtn000 = new ASTboolean_op(JJTBOOLEAN_OP);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);jjtn000.setAttribute(IS_WHILE, false);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          ASTLESS_THAN jjtn001 = new ASTLESS_THAN(JJTLESS_THAN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(LT);
          } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
          }
          break;
        case GT:
           ASTGREATER_THAN jjtn002 = new ASTGREATER_THAN(JJTGREATER_THAN);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(GT);
          } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
           }
          }
          break;
        case LE:
            ASTLESS_THAN_OR_EQUALS jjtn003 = new ASTLESS_THAN_OR_EQUALS(JJTLESS_THAN_OR_EQUALS);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(LE);
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
          break;
        case GE:
             ASTGREATER_THAN_OR_EQUALS jjtn004 = new ASTGREATER_THAN_OR_EQUALS(JJTGREATER_THAN_OR_EQUALS);
             boolean jjtc004 = true;
             jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(GE);
          } finally {
             if (jjtc004) {
               jjtree.closeNodeScope(jjtn004, true);
             }
          }
          break;
        case DOUBLE_EQ:
              ASTEQUALITY jjtn005 = new ASTEQUALITY(JJTEQUALITY);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
          try {
            jj_consume_token(DOUBLE_EQ);
          } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005, true);
              }
          }
          break;
        case NOT_EQ:
               ASTNOT_EQUALS jjtn006 = new ASTNOT_EQUALS(JJTNOT_EQUALS);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
          try {
            jj_consume_token(NOT_EQ);
          } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006, true);
               }
          }
          break;
        case OR:
               ASTOR jjtn007 = new ASTOR(JJTOR);
               boolean jjtc007 = true;
               jjtree.openNodeScope(jjtn007);
          try {
            jj_consume_token(OR);
          } finally {
               if (jjtc007) {
                 jjtree.closeNodeScope(jjtn007, true);
               }
          }
          break;
        case AND:
                ASTAND jjtn008 = new ASTAND(JJTAND);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
          try {
            jj_consume_token(AND);
          } finally {
                if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008, true);
                }
          }
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("boolean_op");
    }
  }

  static final public void condition() throws ParseException {
    trace_call("condition");
    try {
                    /*@bgen(jjtree) condition */
  ASTcondition jjtn000 = new ASTcondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
      System.out.println("before condition");
        jj_consume_token(LEFT_PARAN);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
        case GT:
        case LE:
        case GE:
        case DOUBLE_EQ:
        case OR:
        case AND:
        case NOT_EQ:
          boolean_op();
          Expression();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PARAN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          System.out.println("after condition");
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("condition");
    }
  }

//if statement grammar 
  static final public void if_body() throws ParseException {
    trace_call("if_body");
    try {
                 /*@bgen(jjtree) if_body */
  ASTif_body jjtn000 = new ASTif_body(JJTIF_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Compound_stmt();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("if_body");
    }
  }

  static final public void if_stmt() throws ParseException {
    trace_call("if_stmt");
    try {
                 /*@bgen(jjtree) if_stmt */
  ASTif_stmt jjtn000 = new ASTif_stmt(JJTIF_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if_part();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          else_part();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("if_stmt");
    }
  }

  static final public void if_part() throws ParseException {
    trace_call("if_part");
    try {
                 /*@bgen(jjtree) if_part */
  ASTif_part jjtn000 = new ASTif_part(JJTIF_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IF);
        condition();
        if_body();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("if_part");
    }
  }

  static final public void else_part() throws ParseException {
    trace_call("else_part");
    try {
                   /*@bgen(jjtree) else_part */
  ASTelse_part jjtn000 = new ASTelse_part(JJTELSE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ELSE);
        if_body();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("else_part");
    }
  }

  static final public void while_node() throws ParseException {
    trace_call("while_node");
    try {
                     /*@bgen(jjtree) while_node */
  ASTwhile_node jjtn000 = new ASTwhile_node(JJTWHILE_NODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(WHILE);
        condition();
        Compound_stmt();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("while_node");
    }
  }

  static final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      try {
        if (jj_2_1(3)) {
          Assignment();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
            if_stmt();
            break;
          case WHILE:
            while_node();
            break;
          case PRINTLN:
            println();
            break;
          case FUNCTION:
            FunctionDeclaration();
            break;
          case IDENTIFIER:
            Function_invocation();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException ex) {
     System.out.println("Exception!!!!");
     System.out.println("token :"+ex.currentToken.image);
                HashSet syncSet = new HashSet();
        syncSet.add(SEMICOLON);
        syncSet.add(LEFT_BRACE);
        syncSet.add(RIGHT_BRACE);
        syncSet.add(EOF);
        handleError(ex, syncSet, true);
      }
    } finally {
      trace_return("Statement");
    }
  }

  static final public void Compound_stmt() throws ParseException {
    trace_call("Compound_stmt");
    try {
                        /*@bgen(jjtree) Compound_stmt */
  ASTCompound_stmt jjtn000 = new ASTCompound_stmt(JJTCOMPOUND_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LEFT_BRACE);
        Statement_list();
        jj_consume_token(RIGHT_BRACE);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Compound_stmt");
    }
  }

  static final public void Statement_list() throws ParseException {
    trace_call("Statement_list");
    try {
    System.out.println("before stmt");
      label_1:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case IF:
        case FUNCTION:
        case WHILE:
        case PRINTLN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
          System.out.println("after stmt");
    } finally {
      trace_return("Statement_list");
    }
  }

  static final public void println() throws ParseException {
    trace_call("println");
    try {
                  /*@bgen(jjtree) println */
  ASTprintln jjtn000 = new ASTprintln(JJTPRINTLN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PRINTLN);
        jj_consume_token(LEFT_PARAN);
        factor();
        jj_consume_token(RIGHT_PARAN);
        jj_consume_token(SEMICOLON);
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("println");
    }
  }

//------- Function rules begin -------
  static final public void PureFunction() throws ParseException {
    trace_call("PureFunction");
    try {
                       /*@bgen(jjtree) PureFunction */
  ASTPureFunction jjtn000 = new ASTPureFunction(JJTPUREFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
     System.out.println("SideEffectFunction START");
        jj_consume_token(LEFT_BRACE);
        Statement_list();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          jj_consume_token(RETURN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
          case STRING_LITERAL:
          case IDENTIFIER:
          case NUM:
            Expression();
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_BRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     System.out.println("SideEffectFunction END");
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("PureFunction");
    }
  }

  static final public void FunctionDeclaration() throws ParseException {
    trace_call("FunctionDeclaration");
    try {
                            /*@bgen(jjtree) FunctionDeclaration */
                            ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);SymTabEntry funcID; SimpleNode funcNode;
      try {
        jj_consume_token(FUNCTION);
        jj_consume_token(IDENTIFIER);
      // enter the function name into a symbol table stack
      funcID = symTabStack.enterLocal(token.image);
      funcID.setDefinition(DefinitionImpl.FUNCTION);
      funcID.appendLineNumber(token.beginLine);
          jjtn000.setAttribute(ID, funcID);
      jjtn000.setTypeSpec(symTabStack.lookup("void").getTypeSpec());
          //add all function decl to a list do 
      ArrayList<SimpleNode> funcArr = (ArrayList<SimpleNode>) programId.getAttribute(FUNCTIONS_CODE);
      funcArr.add(jjtn000);
        jj_consume_token(LEFT_PARAN);

        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);

          jj_consume_token(COLON);
          typeSignature();

          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_2;
            }
            jj_consume_token(COMMA);
            jj_consume_token(IDENTIFIER);

            jj_consume_token(COLON);
            typeSignature();

          }
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }

        jj_consume_token(RIGHT_PARAN);
        jj_consume_token(COLON);
        typeSignature();

        PureFunction();

      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     System.out.println("FunctionDeclaration END");
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("FunctionDeclaration");
    }
  }

  static final public void Function_invocation() throws ParseException {
    trace_call("Function_invocation");
    try {
                             /*@bgen(jjtree) Function_invocation */
                             ASTFunction_invocation jjtn000 = new ASTFunction_invocation(JJTFUNCTION_INVOCATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);SymTabEntry funcID; SimpleNode funcNode;
      try {
        jj_consume_token(IDENTIFIER);
      funcID = symTabStack.lookup(token.image);
      funcID.setDefinition(DefinitionImpl.FUNCTION);
      funcID.appendLineNumber(token.beginLine);
          jjtn000.setAttribute(ID, funcID);
        jj_consume_token(LEFT_PARAN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case STRING_LITERAL:
        case IDENTIFIER:
        case NUM:
          Expression();

          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              break label_3;
            }
            jj_consume_token(COMMA);
            Expression();

          }
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PARAN);
        jj_consume_token(SEMICOLON);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Function_invocation");
    }
  }

//------- Function rules end -------
  static final public void declaration() throws ParseException {
    trace_call("declaration");
    try {
                     /*@bgen(jjtree) declaration */
  ASTdeclaration jjtn000 = new ASTdeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        VarIdentifierType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          Expression();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("declaration");
    }
  }

  static final public void Assignment() throws ParseException {
    trace_call("Assignment");
    try {
                    /*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          VarIdentifierType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQ:
            jj_consume_token(EQ);
            Expression();
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
                  ASTidentifier jjtn001 = new ASTidentifier(JJTIDENTIFIER);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
          try {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                  SymTabEntry typeId = symTabStack.lookup(token.image);
          typeId.appendLineNumber(token.beginLine);
          SymTabEntry variableId = symTabStack.lookup(token.image);
                  jjtn001.setAttribute(ID, variableId);
                  jjtn001.setTypeSpec(typeId.getTypeSpec());
          } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
          }
          jj_consume_token(EQ);
          Expression();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Assignment");
    }
  }

  static final public void VarIdentifierType() throws ParseException {
    trace_call("VarIdentifierType");
    try {
      jj_consume_token(VAR);
      IdentifierType();
    } finally {
      trace_return("VarIdentifierType");
    }
  }

  static final public void IdentifierType() throws ParseException {
    trace_call("IdentifierType");
    try {
                              SymTabEntry someID; ICodeNodeImpl old;
      jj_consume_token(IDENTIFIER);
      ASTidentifier jjtn001 = new ASTidentifier(JJTIDENTIFIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      someID = symTabStack.enterLocal(token.image);
      processVariableDecl(token, someID);
      //old = jjtThis;
          jjtn001.setAttribute(ID, someID);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      jj_consume_token(COLON);
      typeSignature();
      SymTabEntry typeId = symTabStack.lookup(token.image);
      typeId.appendLineNumber(token.beginLine);
      TypeSpec type = typeId.getTypeSpec();
      someID.setTypeSpec(type);
      //old.setTypeSpec(type);

    } finally {
      trace_return("IdentifierType");
    }
  }

  static final public void typeSignature() throws ParseException {
    trace_call("typeSignature");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("typeSignature");
    }
  }

  static final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      term();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          term();
          ASTadd jjtn001 = new ASTadd(JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
           jjtn001.setTypeSpec(Predefined.numberType);
          } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
          }
          break;
        case MINUS:
          jj_consume_token(MINUS);
          term();
        ASTsubtract jjtn002 = new ASTsubtract(JJTSUBTRACT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
          try {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtc002 = false;
           jjtn002.setTypeSpec(Predefined.numberType);
          } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Expression");
    }
  }

  static final public void simple_expression() throws ParseException {
    trace_call("simple_expression");
    try {
      factor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case MINUS:
      case PLUS:
      case DIV:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case MUL:
          jj_consume_token(MUL);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        simple_expression();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } finally {
      trace_return("simple_expression");
    }
  }

  static final public void term() throws ParseException {
    trace_call("term");
    try {
      factor();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
        case DIV:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
          jj_consume_token(MUL);
          factor();
          ASTmultiply jjtn001 = new ASTmultiply(JJTMULTIPLY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
           jjtn001.setTypeSpec(Predefined.numberType);
          } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
          }
          break;
        case DIV:
          jj_consume_token(DIV);
          factor();
        ASTdivide jjtn002 = new ASTdivide(JJTDIVIDE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
          try {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtc002 = false;
           jjtn002.setTypeSpec(Predefined.numberType);
          } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("term");
    }
  }

  static final public void factor() throws ParseException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
        boolean_node();
        break;
      case IDENTIFIER:
        identifier();
        break;
      case NUM:
        number();
        break;
      case STRING_LITERAL:
        string();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

  static final public void boolean_node() throws ParseException {
    trace_call("boolean_node");
    try {
                       /*@bgen(jjtree) boolean_node */
  ASTboolean_node jjtn000 = new ASTboolean_node(JJTBOOLEAN_NODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          jj_consume_token(TRUE);
          break;
        case FALSE:
          jj_consume_token(FALSE);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("boolean_node");
    }
  }

  static final public void identifier() throws ParseException {
    trace_call("identifier");
    try {
                     /*@bgen(jjtree) identifier */
  ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        // ID is not really used but might need it later
        jjtn000.setAttribute(ID, variableId);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("identifier");
    }
  }

// try parse integer if not try float if not error 
  static final public void number() throws ParseException {
    trace_call("number");
    try {
                 /*@bgen(jjtree) number */
  ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(NUM);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
          jjtn000.setTypeSpec(Predefined.numberType);
      jjtn000.setAttribute(VALUE, Double.parseDouble(token.image));
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("number");
    }
  }

  static final public void string() throws ParseException {
    trace_call("string");
    try {
                 /*@bgen(jjtree) string */
  ASTstring jjtn000 = new ASTstring(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(STRING_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
          jjtn000.setTypeSpec(Predefined.charType);
          jjtn000.setAttribute(VALUE, token.image);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("string");
    }
  }

  static final public void error() throws ParseException {
    trace_call("error");
    try {
                /*@bgen(jjtree) error */
  ASTerror jjtn000 = new ASTerror(JJTERROR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ERROR);
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("error");
    }
  }

//return the token name in string format
  static void processVariableDecl(Token token, SymTabEntry variableId) throws ParseException {
    trace_call("processVariableDecl");
    try {
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    } finally {
      trace_return("processVariableDecl");
    }
  }

  static String handleError(ParseException ex, HashSet syncSet, boolean doPop) throws ParseException {
    trace_call("handleError");
    try {
 /*@bgen(jjtree) handleError */
     ASThandleError jjtn000 = new ASThandleError(JJTHANDLEERROR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {generate_code_flag = false;
    Token token = ex.currentToken;
    TypeScriptParseException tse = new TypeScriptParseException(ex);
//    syncSet.put(EOF);
//    System.out.println(ex.getMessage2());
    System.out.println(tse.getMessage());
//	System.out.println("TOKEN PARSED: "+token.image);
    // Consume tokens up to but not including a token in the sync set.
//    System.out.println(getToken(1).image);
    while (!syncSet.contains(token.kind))
    {
      //getToken(1).kind)) {
        token = getNextToken();
    }
    System.out.println(getToken(1).image);
    while (!syncSet.contains(token.kind))
    {
      //getToken(1).kind)) {
        token = getNextToken();
    }

//    if (doPop) jjtree.popNode();
    return token.image;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
    } finally {
      trace_return("handleError");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TypeScriptParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x2000,0xc04800,0xc04c00,0x3000000,0x100000,0x0,0x0,0x0,0x3000000,0x80000000,0x80000000,0x400,0x238000,0x60000000,0x60000000,0x70000000,0x70000000,0x10000000,0x10000000,0x3000000,0x3000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xff0000,0xff0000,0x0,0x4000000,0x4000000,0xe000000,0x0,0x20,0x4000000,0x20,0xe000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0xe000000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TypeScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TypeScriptParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TypeScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TypeScriptParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TypeScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TypeScriptParser(TypeScriptParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TypeScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
