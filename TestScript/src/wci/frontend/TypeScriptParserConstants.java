/* Generated By:JJTree&JavaCC: Do not edit this line. TypeScriptParserConstants.java */
package wci.frontend;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TypeScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIGIT = 6;
  /** RegularExpression Id. */
  int ONE_TO_NINE = 7;
  /** RegularExpression Id. */
  int LETTER = 8;
  /** RegularExpression Id. */
  int SPACE = 9;
  /** RegularExpression Id. */
  int VAR = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int ELSE_IF = 12;
  /** RegularExpression Id. */
  int ELSE = 13;
  /** RegularExpression Id. */
  int FUNCTION = 14;
  /** RegularExpression Id. */
  int BOOLEAN = 15;
  /** RegularExpression Id. */
  int NUMBER = 16;
  /** RegularExpression Id. */
  int STRING = 17;
  /** RegularExpression Id. */
  int ENUM = 18;
  /** RegularExpression Id. */
  int INTERFACE = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int VOID = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int PRINTLN = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int FALSE = 25;
  /** RegularExpression Id. */
  int NOT = 26;
  /** RegularExpression Id. */
  int AMPRSAND = 27;
  /** RegularExpression Id. */
  int MUL = 28;
  /** RegularExpression Id. */
  int MINUS = 29;
  /** RegularExpression Id. */
  int PLUS = 30;
  /** RegularExpression Id. */
  int EQ = 31;
  /** RegularExpression Id. */
  int BAR = 32;
  /** RegularExpression Id. */
  int DIV = 33;
  /** RegularExpression Id. */
  int COLON = 34;
  /** RegularExpression Id. */
  int SEMICOLON = 35;
  /** RegularExpression Id. */
  int QM = 36;
  /** RegularExpression Id. */
  int COMMA = 37;
  /** RegularExpression Id. */
  int DOT = 38;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 39;
  /** RegularExpression Id. */
  int QUOTE = 40;
  /** RegularExpression Id. */
  int LEFT_PARAN = 41;
  /** RegularExpression Id. */
  int RIGHT_PARAN = 42;
  /** RegularExpression Id. */
  int LEFT_BRAKET = 43;
  /** RegularExpression Id. */
  int RIGHT_BRAKET = 44;
  /** RegularExpression Id. */
  int LEFT_BRACE = 45;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 46;
  /** RegularExpression Id. */
  int UNDER_SCORE = 47;
  /** RegularExpression Id. */
  int LT = 48;
  /** RegularExpression Id. */
  int GT = 49;
  /** RegularExpression Id. */
  int LE = 50;
  /** RegularExpression Id. */
  int GE = 51;
  /** RegularExpression Id. */
  int DOUBLE_EQ = 52;
  /** RegularExpression Id. */
  int OR = 53;
  /** RegularExpression Id. */
  int AND = 54;
  /** RegularExpression Id. */
  int NOT_EQ = 55;
  /** RegularExpression Id. */
  int MATH_OP = 56;
  /** RegularExpression Id. */
  int STRING_LITERAL = 57;
  /** RegularExpression Id. */
  int IDENTIFIER = 58;
  /** RegularExpression Id. */
  int NUM = 59;
  /** RegularExpression Id. */
  int INTEGER = 60;
  /** RegularExpression Id. */
  int REAL = 61;
  /** RegularExpression Id. */
  int SIGN = 62;
  /** RegularExpression Id. */
  int ERROR = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<DIGIT>",
    "<ONE_TO_NINE>",
    "<LETTER>",
    "<SPACE>",
    "\"var\"",
    "\"if\"",
    "\"else if\"",
    "\"else\"",
    "\"function\"",
    "\"boolean\"",
    "\"number\"",
    "\"char\"",
    "\"enum\"",
    "\"interface\"",
    "\"return\"",
    "\"void\"",
    "\"while\"",
    "\"println\"",
    "\"true\"",
    "\"false\"",
    "\"!\"",
    "\"&\"",
    "\"*\"",
    "\"-\"",
    "\"+\"",
    "\"=\"",
    "\"|\"",
    "\"/\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\",\"",
    "\".\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"_\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"||\"",
    "\"&&\"",
    "\"!=\"",
    "<MATH_OP>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<NUM>",
    "<INTEGER>",
    "<REAL>",
    "\"\"",
    "<ERROR>",
  };

}
