/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TestTree.jj */
/*@egen*/options {
               
                 
}


PARSER_BEGIN(TestTree)
package Test;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

public class TestTree/*@bgen(jjtree)*/implements TestTreeTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTTestTreeState jjtree = new JJTTestTreeState();

/*@egen*/
  public static void main(String[] args) throws IOException
  {
    byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
  	String content = new String(encoded, StandardCharsets.UTF_8);
    Reader sr = new StringReader(content);
  	TestTree calc = new TestTree(sr);
    try {
      SimpleNode root = calc.Expression();
      SumVisitor visitor = new SumVisitor();
      
      root.jjtAccept(visitor, null);
      System.out.println("Sum is " + visitor.sum);
   }
    
    catch (ParseException ex) {
      ex.printStackTrace();
    }
  }
}
PARSER_END(TestTree)

SKIP : {
  " "
}

TOKEN : { 
  <DIGITS : (["0"-"9"])+> | <PLUS : "+"> 
}

SimpleNode Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  
  Operator()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Operator() : {/*@bgen(jjtree) Operator */
                   ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  Operand()
  t="+" {jjtn000.jjtSetValue(t.image);}
  Operand()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Operand() : {/*@bgen(jjtree) Operand */
                  ASTOperand jjtn000 = new ASTOperand(JJTOPERAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Operand */
  try {
/*@egen*/
  t=<DIGITS>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.jjtSetValue(new Integer(t.image));}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}