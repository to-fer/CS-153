options {
    BUILD_PARSER=true;
    IGNORE_CASE=true;
    DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(TypeScriptParser)

import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;


/**
	TypeScriptParser is the class that is doing the parsing of
	the program file (not implemented)
*/
public class TypeScriptParser
{
    public static void main(String [] args) throws IOException
    {
      	byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
	  	String content = new String(encoded, StandardCharsets.UTF_8);
        java.io.StringReader sr = new java.io.StringReader(content);
        TypeScriptParser parser = new TypeScriptParser(sr);
        try {
            parser.Expression();
        }
        catch (ParseException ex) {
            ex.printStackTrace();
        }
    }
}
PARSER_END(TypeScriptParser)

/**
	TypeScriptParserTokenManager class is used to just test if the
	TOKENS that are difined actually work as planned It does not do
	any parsing
*/
TOKEN_MGR_DECLS : {
    public static void main(String [] args) throws IOException
    {
	  byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
	  String content = new String(encoded, StandardCharsets.UTF_8);
        java.io.StringReader sr = new java.io.StringReader(content);
        SimpleCharStream scs = new SimpleCharStream(sr);
        TypeScriptParserTokenManager mgr = new TypeScriptParserTokenManager(scs);

		while (mgr.getNextToken().kind != EOF) {}
    }
}


SKIP : {
    <IGNORE : [" ", "\n", "\t", "\r"]>
   | <"//" (~["\n"])* ("\n"|"\r")? >
   | <"/*" > : ML_COMMENT
}

<ML_COMMENT> SKIP :
{
  <"*/" >: DEFAULT
  |<~[]>
}

TOKEN : { //useful regex
	<#DIGIT  : ["0"-"9"]>
    |<#ONE_TO_NINE: ["1"-"9"] >
	  	//A-Z only if ignore case option is false
	| <#LETTER : ["a"-"z","A"-"Z"]>
	| <#SPACE: [" "] >
}

TOKEN : {//Reserved words
	<VAR : "var">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
	| <IF : "if">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <ELSE : "else">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FUNCTION : "function">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <BOOLEAN : "boolean">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <NUMBER : "number">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <STRING : "string">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <ENUM : "enum">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INTERFACE : "interface">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <RETURN : "return">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <VOID : "void">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <WHILE : "while">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
}

TOKEN : {//Symbols
	<NOT : "!">
	{ debugStream.println("NOT SYMBOL token: " + matchedToken.image); }
	| <AT : "@">
	{ debugStream.println("AT SYMBOL token: " + matchedToken.image); }
	| <MOD : "%">
	{ debugStream.println("MOD SYMBOL token: " + matchedToken.image); }
	| <CARROT : "^">
	{ debugStream.println("CARROT SYMBOL token: " + matchedToken.image); }
	| <AMPRSAND : "&">
	{ debugStream.println("AMPRSAND SYMBOL token: " + matchedToken.image); }
	| <MUL : "*">
	{ debugStream.println("MUL SYMBOL token: " + matchedToken.image); }
	| <MINUS : "-">
	{ debugStream.println("MINUS SYMBOL token: " + matchedToken.image); }
	| <PLUS : "+">
	{ debugStream.println("PLUS SYMBOL token: " + matchedToken.image); }
	| <EQ : "=">
	{ debugStream.println("SINGLE_EQ SYMBOL token: " + matchedToken.image); }
	| <BAR : "|">
	{ debugStream.println("BAR SYMBOL token: " + matchedToken.image); }
	| <DIV : "/">
	{ debugStream.println("DIV SYMBOL token: " + matchedToken.image); }
	| <COLON : ":">
	{ debugStream.println("COLON SYMBOL token: " + matchedToken.image); }
	| <SEMICOLON : ";">
	{ debugStream.println("SEMICOLON SYMBOL token: " + matchedToken.image); }
	| <QM : "?">
	{ debugStream.println("QM SYMBOL token: " + matchedToken.image); }
	| <LT : "<">
	{ debugStream.println("LT SYMBOL token: " + matchedToken.image); }
	| <GT : ">">
	{ debugStream.println("GT SYMBOL token: " + matchedToken.image); }
	| <COMMA : ",">
	{ debugStream.println("COMMA SYMBOL token: " + matchedToken.image); }
	| <DOT : ".">
	{ debugStream.println("DOT SYMBOL token: " + matchedToken.image); }
	| <SINGLE_QUOTE : "'">
	{ debugStream.println("SINGLE_QUOTE SYMBOL token: " + matchedToken.image); }
	| <QUOTE : "\"">
	{ debugStream.println("QUOTE SYMBOL token: " + matchedToken.image); }
	| <LEFT_PARAN : "(">
	{ debugStream.println("LEFT_PARAN SYMBOL token: " + matchedToken.image); }
	| <RIGHT_PARAN : ")">
	{ debugStream.println("RIGHT_PARAN SYMBOL token: " + matchedToken.image); }
	| <LEFT_BRAKET : "[">
	{ debugStream.println("LEFT_BRAKET SYMBOL token: " + matchedToken.image); }
	| <RIGHT_BRAKET : "]">
	{ debugStream.println("RIGHT_BRAKET SYMBOL token: " + matchedToken.image); }
	| <LEFT_BRACE : "{"> 
	{ debugStream.println("LEFT_BRACE SYMBOL token: " + matchedToken.image); }
	| <RIGHT_BRACE : "}">
	{ debugStream.println("RIHGT_BRACE SYMBOL token: " + matchedToken.image); }
	| <LE : "<=">
	{ debugStream.println("LT EQUAL SYMBOL token: " + matchedToken.image); }
	| <UNDER_SCORE : "_">
	{ debugStream.println("UNDER_SCORE EQUAL SYMBOL token: " + matchedToken.image); }
	| <GE : ">=">
	{ debugStream.println("GT EQUAL SYMBOL token: " + matchedToken.image); }
	| <PLUS_EQ : "+=">
	{ debugStream.println("PLUS EQAUALS SYMBOL token: " + matchedToken.image); }
	| <DOUBLE_EQ : "==">
	{ debugStream.println("DOUBLE_EQ SYMBOL token: " + matchedToken.image); }
	| <OR : "||">
	{ debugStream.println("OR SYMBOL token: " + matchedToken.image); }
	| <AND : "&&">
	{ debugStream.println("AND SYMBOL token: " + matchedToken.image); }
	| <NOT_EQ : "!=">
	{ debugStream.println("NOT EQUAL SYMBOL token: " + matchedToken.image); }
}

/* TypeScript treats char as a string of length 1*/
TOKEN : {//Character String and Strings
	<STRING_LITERAL : <QUOTE> (~["\""])* <QUOTE> | <SINGLE_QUOTE> (~[]){1} <SINGLE_QUOTE> >
	{ debugStream.println("STRING token: " + matchedToken.image); }
}

TOKEN : {//Identifier
	<IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> | "_")*>
	{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
}

/* TypeScript treats real and integers as Numbers*/
TOKEN : {//Numbers
	<NUM: <INTEGER> | <REAL>> 
     { debugStream.println("NUMBER TOKEN: " + matchedToken.image); }
	| <INTEGER: (<SIGN>)? (<DIGIT>)+ | (<ONE_TO_NINE> (<DIGIT>)+) >
	| <REAL: (<SIGN>)? (<DIGIT>)+ "." | (<SIGN>)? "." (<DIGIT>)+ | (<SIGN>)? (<DIGIT>)+ "." (<DIGIT>)+ >
 	| <#SIGN: "-" | "+" >
}



void Statement() : {}
{
  Compound_stmt() | Assignment() | Expression() <SEMICOLON> | If_stmt() 
}


void Compound_stmt() : {}
{
  <LEFT_BRACE> Statement_list() <RIGHT_BRACE>
}

void Statement_list() : {}
{
  (Statement())*
}

void If_stmt():{}
{
  LOOKAHEAD(2)
  	{System.out.println("IF_STATEMENT START");}
	If_part() Else_part() | If_part()
	{System.out.println("IF_STATEMENT END");}
}

void If_part():{}
{
	<IF> <LEFT_PARAN> Expression() <RIGHT_PARAN> Statement()
}

void Else_part():{}
{
	< ELSE > Statement() 
}

void IdentifierType():{}
{
    identifier() <COLON> typeSignature()
}

void ArgumentList(): {}
{
    <LEFT_PARAN> (IdentifierType() (<COMMA> IdentifierType())* )? <RIGHT_PARAN>
}

void PureFunction(): {}
{
    {System.out.println("PureFunction START");}
    // If at some point typeSignature() includes void, then we'll need to do something else here because of
    // how SideEffectFunction() is defined with <VOID> at the front.
    <LEFT_BRACE> Statement_list() <RETURN> Expression() <SEMICOLON> <RIGHT_BRACE>
    {System.out.println("PureFunction END");}
}

void SideEffectFunction(): {}
{
    {System.out.println("SideEffectFunction START");}
    <LEFT_BRACE> Statement_list() (<RETURN> <SEMICOLON>)? <RIGHT_BRACE>
    {System.out.println("SideEffectFunction END");}
}

void FunctionDeclaration():{}
{
    {System.out.println("FunctionDeclaration START");}
    <FUNCTION> identifier() ArgumentList() (<COLON> (typeSignature() PureFunction() | <VOID> SideEffectFunction()) | SideEffectFunction())
    {System.out.println("FunctionDeclaration END");}
}

void Assignment():{}
{
	AssignmentVar() (<EQ> Expression())? <SEMICOLON>
	{System.out.println("ComplexAssignmentStatement ENDS");}
}

void AssignmentVar():{}
{
    <VAR> IdentifierType()
}

void typeSignature():{}
{
  {System.out.println("Type: number");}
   <NUMBER>
  {System.out.println("Type: boolean");}
  |<BOOLEAN>
  {System.out.println("Type: string");}
  |<STRING>
}

// all the Expression 
void Expression() : {} 
{
  LOOKAHEAD(2)
  {System.out.println("SimpleExpression STARTS");}
  SimpleExpression()
  {System.out.println("SimpleExpression ENDS");}
  |  	(
  	  SimpleExpression()
  		// ==             !=         <      <=     >      >=          
  		( <DOUBLE_EQ> | <NOT_EQ> | <LT> | <LE> | <GT> | <GE>)
  		SimpleExpression()
  	)
}

void SimpleExpression() : {} 
{
  LOOKAHEAD(2)
 	( (<PLUS> | <MINUS>)? term()
	  	(
	  	  (<PLUS> | <MINUS> | <OR>)
	  	  term()
	  	)*
  	) | term()
}

void term() : {} 
{
  LOOKAHEAD(2)
  (
    factor()
    	(  
			(<MUL>| <DIV> | <MOD> | <AND>)
			factor()
		)*
  ) | factor()
  
}

void factor() : {} 
{
  <NOT> factor() | identifier() | number() | string() |
  <LEFT_PARAN> Expression() <RIGHT_PARAN>
}


void identifier() : {} 
{
  <IDENTIFIER>
}

void number() : {} 
{
  <NUM>
}

void string() : {} 
{
  <STRING_LITERAL>
}