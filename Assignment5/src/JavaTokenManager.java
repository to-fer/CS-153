/* Generated By:JavaCC: Do not edit this line. JavaTokenManager.java */
import java.io.IOException;
import java.io.*;

/** Token Manager. */
public class JavaTokenManager implements JavaConstants
{
        public static void main(String[] args) throws IOException
        {
          BufferedReader javaReader = new BufferedReader( new FileReader(args[0]));
          SimpleCharStream javaStream = new SimpleCharStream(javaReader);
          JavaTokenManager mgr = new JavaTokenManager(javaStream);

          for(Token t = mgr.getNextToken(); t.kind != EOF; t = mgr.getNextToken())
          {
            debugStream.println("Found token: "+t.image);
          }
        }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_0(0x22L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x84200L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x844200200000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x408L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1108000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x88024000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x42810840L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1102000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x21080L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x211088000010L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x510042100L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020200000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000400000L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400208042100L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000008000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10800L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x42900000L);
      case 111:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x860804000604L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x510005080L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010000020000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80010L);
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4680000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000180L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020020000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x848800000010L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80008001200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000010800L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000042000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa08022L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2041480004L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10100400L);
      case 119:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         break;
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         break;
      default :
         return 3;
   }
   return 3;
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xa8000004000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x10041000020L);
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000020a00L);
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 111:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(3, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x52000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(3, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x44020000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00080801002L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      default :
         return 4;
   }
   return 4;
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800080L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x201000000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x1a00L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800080020000L);
      case 107:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(4, 14);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000400L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x40410022L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 119:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      default :
         return 5;
   }
   return 5;
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x202L);
      case 99:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 37);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(5, 45);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         break;
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(5, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000080L);
      default :
         return 6;
   }
   return 6;
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800002L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(6, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000800L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         break;
      default :
         return 7;
   }
   return 7;
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 41);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(7, 47);
         return jjMoveStringLiteralDfa8_0(active0, 0x801000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000810L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(7, 36);
         break;
      case 116:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(7, 1);
         break;
      default :
         return 8;
   }
   return 8;
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(8, 12);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      default :
         return 9;
   }
   return 9;
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(9, 23);
         break;
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(9, 11);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x10L);
      default :
         return 10;
   }
   return 10;
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10L);
      default :
         return 11;
   }
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(11, 4);
         break;
      default :
         return 12;
   }
   return 12;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\141\142\163\164\162\141\143\164", "\147\157\164\157", "\144\157", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\141\163\163\145\162\164", "\151\146", "\160\162\151\166\141\164\145", 
"\164\150\151\163", "\142\157\157\154\145\141\156", "\144\157\165\142\154\145", 
"\151\155\160\154\145\155\145\156\164\163", "\160\162\157\164\145\143\164\145\144", "\164\150\162\157\167", 
"\142\162\145\141\153", "\145\154\163\145", "\151\155\160\157\162\164", "\160\165\142\154\151\143", 
"\164\150\162\157\167\163", "\142\171\164\145", "\145\156\165\155", "\143\141\163\145", 
"\162\145\164\165\162\156", "\151\156\163\164\141\156\143\145\157\146", "\145\170\164\145\156\144\163", 
"\151\156\164", "\146\157\162", "\163\150\157\162\164", "\164\162\165\145", 
"\146\141\154\163\145", "\151\156\164\145\162\146\141\143\145", "\163\164\141\164\151\143", 
"\164\162\171", "\143\150\141\162", "\164\162\141\156\163\151\145\156\164", 
"\154\157\156\147", "\163\164\162\151\143\164\146\160", "\156\141\164\151\166\145", 
"\143\154\141\163\163", "\146\151\156\141\154\154\171", "\163\165\160\145\162", 
"\166\157\154\141\164\151\154\145", "\143\157\156\163\164", "\146\154\157\141\164", "\156\145\167", 
"\163\167\151\164\143\150", "\167\150\151\154\145", "\143\157\156\164\151\156\165\145", 
"\156\165\154\154", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[0];
static private final int[] jjstateSet = new int[0];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public JavaTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public JavaTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
      debugStream.println("ABSTRACT token: " + matchedToken.image);
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
      debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
      debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
      debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
      debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
          debugStream.println("GOTO token: " + matchedToken.image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
