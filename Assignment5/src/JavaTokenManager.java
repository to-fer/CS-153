/* Generated By:JavaCC: Do not edit this line. JavaTokenManager.java */
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.File;

/** Token Manager. */
public class JavaTokenManager implements JavaConstants
{
    public static void main(String[] args) throws IOException
    {
          byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
          String content = new String(encoded, StandardCharsets.UTF_8);
        java.io.StringReader sr = new java.io.StringReader(content);
        SimpleCharStream scs = new SimpleCharStream(sr);
        JavaTokenManager mgr = new JavaTokenManager(scs);

        for (Token t = mgr.getNextToken(); t.kind != EOF; t = mgr.getNextToken()) {
            debugStream.println("Found token: " + t.image);
        }
    }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200L) != 0L)
            return 51;
         if ((active1 & 0x400L) != 0L)
            return 4;
         if ((active1 & 0x20000008000004L) != 0L)
            return 19;
         if ((active0 & 0x7ffffffffffffcL) != 0L)
         {
            jjmatchedKind = 104;
            return 2;
         }
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x30c0000L) != 0L)
            return 52;
         if ((active1 & 0x800L) != 0L)
            return 53;
         return -1;
      case 1:
         if ((active0 & 0x2220L) != 0L)
            return 2;
         if ((active1 & 0x20000000000000L) != 0L)
            return 54;
         if ((active0 & 0x7fffffffffdddcL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 1;
            }
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x4001430000000L) != 0L)
            return 2;
         if ((active0 & 0x7bffebcffffddcL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 2;
            }
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0x40052081c40808L) != 0L)
            return 2;
         if ((active0 & 0x3bfacf4e3bf5d4L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 3;
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0x13704340230000L) != 0L)
            return 2;
         if ((active0 & 0x288a8c0e18f5d4L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 4;
            }
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x8080802382100L) != 0L)
            return 2;
         if ((active0 & 0x20a2840c00d4d4L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x200008001490L) != 0L)
            return 2;
         if ((active0 & 0x2082840400c044L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
            return 2;
         }
         return -1;
      case 7:
         if ((active0 & 0x20820000000004L) != 0L)
            return 2;
         if ((active0 & 0x840400c040L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
            return 2;
         }
         return -1;
      case 8:
         if ((active0 & 0x8400008000L) != 0L)
            return 2;
         if ((active0 & 0x4004040L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 8;
            return 2;
         }
         return -1;
      case 9:
         if ((active0 & 0x4004000L) != 0L)
            return 2;
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 9;
            return 2;
         }
         return -1;
      case 10:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 10;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 75, 53);
      case 37:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 38:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x480000000L);
      case 39:
         return jjStartNfaWithStates_0(0, 74, 4);
      case 40:
         return jjStopAtPos(0, 76);
      case 41:
         return jjStopAtPos(0, 77);
      case 42:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000004000000L);
      case 43:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1040000L);
      case 44:
         return jjStopAtPos(0, 72);
      case 45:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2080000L);
      case 46:
         return jjStartNfaWithStates_0(0, 73, 51);
      case 47:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000008000000L);
      case 58:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 59:
         return jjStopAtPos(0, 68);
      case 60:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5000500000L);
      case 61:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 62:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000a00000L);
      case 63:
         return jjStopAtPos(0, 69);
      case 64:
         return jjStopAtPos(0, 57);
      case 91:
         return jjStopAtPos(0, 78);
      case 93:
         return jjStopAtPos(0, 79);
      case 94:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x104L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x421000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x21102101000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2030L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8840000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2204220000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x414084200L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x44080000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x108480L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8420840000040L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x9080210800L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x840000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 80);
      case 124:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x220000000L);
      case 125:
         return jjStopAtPos(0, 81);
      case 126:
         return jjStopAtPos(0, 55);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 42:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 117, 54);
         break;
      case 43:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 45:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 47:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 60:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L);
      case 61:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 62:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80301000080L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000002000010L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 2);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10002040210800L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2100000040000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x414800000L, active1, 0L);
      case 111:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x21850020003008L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x9080028400L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40400000100000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400040L, active1, 0L);
      case 124:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10a800000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x18040000000c00L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40800200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x21214000000040L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000040009000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000084000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000210000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x5040104L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8050a400008L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80802000L, active1, 0L);
      case 119:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 2);
         break;
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2a04000020010L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000040L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 2);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 2);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 2);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 2);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x400408000100L);
      case 103:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000105000L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 2);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 111:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x290000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x1100200000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x28000804008004L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000480L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8020000000000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 2);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0xd000L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000800100000L);
      case 107:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 2);
         break;
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000002000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x402080104L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 2);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 2);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 119:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1004L);
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 2);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 2);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 2);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x808000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000010L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000004000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 2);
         break;
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 2);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000004L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 2);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 2);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000004000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 2);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 2);
         break;
      case 116:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 2);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 2);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 2);
         return jjMoveStringLiteralDfa8_0(active0, 0x4008000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000004040L);
      case 112:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 2);
         break;
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 2, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 2);
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 2);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 2);
         break;
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 2);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 6, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x3ffd48300000400L & l) != 0L)
                     jjCheckNAddTwoStates(23, 25);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(27);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(0, 10);
                  }
                  else if ((0x100000600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(11, 16);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 47)
                     jjAddStates(17, 18);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  else if (curChar == 48)
                     jjCheckNAddStates(19, 22);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 34);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(49);
                  }
                  break;
               case 53:
                  if ((0x3ffd48300000400L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 19:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(23, 25);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x3ffd48200000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 39 && kind > 107)
                     kind = 107;
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x3ffd48300000400L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 34 && kind > 112)
                     kind = 112;
                  break;
               case 9:
                  if (curChar == 48)
                     jjCheckNAddStates(19, 22);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(13);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjAddStates(23, 24);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 47)
                     jjAddStates(17, 18);
                  break;
               case 20:
                  if ((0x3ff448100000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 10 && kind > 114)
                     kind = 114;
                  break;
               case 22:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(23, 25);
                  break;
               case 23:
                  if ((0x3ffd48300000400L & l) != 0L)
                     jjCheckNAddTwoStates(23, 25);
                  break;
               case 24:
                  if (curChar == 47 && kind > 115)
                     kind = 115;
                  break;
               case 25:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(11, 16);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 46 && kind > 127)
                     kind = 127;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 46)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 34);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(0, 10);
                  break;
               case 45:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 34);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
               case 23:
                  if ((0x7fffffe17ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 25);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(2);
                  break;
               case 53:
               case 7:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0x7fffffe17fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 14:
                  if (curChar == 120)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(27, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   27, 28, 29, 30, 31, 33, 39, 40, 42, 43, 34, 27, 28, 30, 33, 39, 
   42, 19, 22, 10, 11, 12, 14, 15, 16, 20, 21, 35, 36, 37, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, "\141\142\163\164\162\141\143\164", "\147\157\164\157", 
"\144\145\146\141\165\154\164", "\144\157", "\163\171\156\143\150\162\157\156\151\172\145\144", 
"\160\141\143\153\141\147\145", "\141\163\163\145\162\164", "\151\146", "\160\162\151\166\141\164\145", 
"\164\150\151\163", "\142\157\157\154\145\141\156", "\144\157\165\142\154\145", 
"\151\155\160\154\145\155\145\156\164\163", "\160\162\157\164\145\143\164\145\144", "\164\150\162\157\167", 
"\142\162\145\141\153", "\145\154\163\145", "\151\155\160\157\162\164", "\160\165\142\154\151\143", 
"\164\150\162\157\167\163", "\142\171\164\145", "\145\156\165\155", "\143\141\163\145", 
"\162\145\164\165\162\156", "\151\156\163\164\141\156\143\145\157\146", "\145\170\164\145\156\144\163", 
"\151\156\164", "\146\157\162", "\163\150\157\162\164", "\164\162\165\145", 
"\143\141\164\143\150", "\146\141\154\163\145", "\151\156\164\145\162\146\141\143\145", 
"\163\164\141\164\151\143", "\164\162\171", "\143\150\141\162", "\146\151\156\141\154", 
"\164\162\141\156\163\151\145\156\164", "\154\157\156\147", "\163\164\162\151\143\164\146\160", "\166\157\151\144", 
"\156\141\164\151\166\145", "\143\154\141\163\163", "\146\151\156\141\154\154\171", 
"\163\165\160\145\162", "\166\157\154\141\164\151\154\145", "\143\157\156\163\164", 
"\146\154\157\141\164", "\156\145\167", "\163\167\151\164\143\150", "\167\150\151\154\145", 
"\143\157\156\164\151\156\165\145", "\156\165\154\154", "\176", "\41", "\100", "\45", "\136", "\46", "\52", "\55", 
"\53", "\75", "\174", "\57", "\72", "\73", "\77", "\74", "\76", "\54", "\56", "\47", 
"\42", "\50", "\51", "\133", "\135", "\173", "\175", "\53\53", "\55\55", "\74\74", 
"\76\76", "\74\75", "\76\75", "\53\75", "\55\75", "\52\75", "\57\75", "\75\75", 
"\174\75", "\45\75", "\46\75", "\136\75", "\174\174", "\46\46", "\41\75", "\74\74\75", 
"\76\76\75", "\74\76", "\72\75", null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\57\52", "\52\57", null, null, null, null, null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0x906d09ffffffffffL, 0x5L, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[51];
static private final int[] jjstateSet = new int[102];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public JavaTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public JavaTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 51; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
      debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
      debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
      debugStream.println("DEFAULT token: " + matchedToken.image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
      debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
      debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
      debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
      debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
          debugStream.println("RESERVED_WORD token: " + matchedToken.image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 102 :
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 103 :
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
          debugStream.println("SYMBOL token: " + matchedToken.image);
         break;
      case 104 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("IDENTIFIER token: " + matchedToken.image);
         break;
      case 107 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       debugStream.println("CHARACTER token: " + matchedToken.image);
         break;
      case 112 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       debugStream.println("STRING token: " + matchedToken.image);
         break;
      case 114 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("COMMENT_INLINE: " + matchedToken.image);
         break;
      case 115 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("COMMENT_BLK: " + matchedToken.image);
         break;
      case 124 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       debugStream.println("INTEGER TOKEN: " + matchedToken.image);
         break;
      case 127 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       debugStream.println("REAL TOKEN: " + matchedToken.image);
         break;
      case 128 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       debugStream.println("HEX TOKEN: " + matchedToken.image);
         break;
      case 130 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       debugStream.println("SI TOKEN: " + matchedToken.image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
