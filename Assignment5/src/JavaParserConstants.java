/* Generated By:JavaCC: Do not edit this line. JavaParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IGNORE = 1;
  /** RegularExpression Id. */
  int ABSTRACT = 2;
  /** RegularExpression Id. */
  int GOTO = 3;
  /** RegularExpression Id. */
  int DEAFAULT = 4;
  /** RegularExpression Id. */
  int DO = 5;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 6;
  /** RegularExpression Id. */
  int PACKAGE = 7;
  /** RegularExpression Id. */
  int ASSERT = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int PRIVATE = 10;
  /** RegularExpression Id. */
  int THIS = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int DOUBLE = 13;
  /** RegularExpression Id. */
  int IMPLEMENTS = 14;
  /** RegularExpression Id. */
  int PROTECTED = 15;
  /** RegularExpression Id. */
  int THROW = 16;
  /** RegularExpression Id. */
  int BREAK = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int IMPORT = 19;
  /** RegularExpression Id. */
  int PUBLIC = 20;
  /** RegularExpression Id. */
  int THROWS = 21;
  /** RegularExpression Id. */
  int BYTE = 22;
  /** RegularExpression Id. */
  int ENUM = 23;
  /** RegularExpression Id. */
  int CASE = 24;
  /** RegularExpression Id. */
  int RETURN = 25;
  /** RegularExpression Id. */
  int INSTANCEOF = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int INT = 28;
  /** RegularExpression Id. */
  int FOR = 29;
  /** RegularExpression Id. */
  int SHORT = 30;
  /** RegularExpression Id. */
  int TRUE = 31;
  /** RegularExpression Id. */
  int CATCH = 32;
  /** RegularExpression Id. */
  int FALSE = 33;
  /** RegularExpression Id. */
  int INTERFACE = 34;
  /** RegularExpression Id. */
  int STATIC = 35;
  /** RegularExpression Id. */
  int TRY = 36;
  /** RegularExpression Id. */
  int CHAR = 37;
  /** RegularExpression Id. */
  int FINAL = 38;
  /** RegularExpression Id. */
  int TRANSIENT = 39;
  /** RegularExpression Id. */
  int LONG = 40;
  /** RegularExpression Id. */
  int STRICTFP = 41;
  /** RegularExpression Id. */
  int VOID = 42;
  /** RegularExpression Id. */
  int NATIVE = 43;
  /** RegularExpression Id. */
  int CLASS = 44;
  /** RegularExpression Id. */
  int FINALLY = 45;
  /** RegularExpression Id. */
  int SUPER = 46;
  /** RegularExpression Id. */
  int VOLATILE = 47;
  /** RegularExpression Id. */
  int CONST = 48;
  /** RegularExpression Id. */
  int FLOAT = 49;
  /** RegularExpression Id. */
  int NEW = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int WHILE = 52;
  /** RegularExpression Id. */
  int CONTINUE = 53;
  /** RegularExpression Id. */
  int NULL = 54;
  /** RegularExpression Id. */
  int TILDA = 55;
  /** RegularExpression Id. */
  int NOT = 56;
  /** RegularExpression Id. */
  int AT = 57;
  /** RegularExpression Id. */
  int MOD = 58;
  /** RegularExpression Id. */
  int CARROT = 59;
  /** RegularExpression Id. */
  int AMPRSAND = 60;
  /** RegularExpression Id. */
  int MUL = 61;
  /** RegularExpression Id. */
  int MINUS = 62;
  /** RegularExpression Id. */
  int PLUS = 63;
  /** RegularExpression Id. */
  int SINGLE_EQ = 64;
  /** RegularExpression Id. */
  int BAR = 65;
  /** RegularExpression Id. */
  int DIV = 66;
  /** RegularExpression Id. */
  int COLON = 67;
  /** RegularExpression Id. */
  int SEMICOLON = 68;
  /** RegularExpression Id. */
  int QM = 69;
  /** RegularExpression Id. */
  int LT = 70;
  /** RegularExpression Id. */
  int GT = 71;
  /** RegularExpression Id. */
  int COMMA = 72;
  /** RegularExpression Id. */
  int DOT = 73;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 74;
  /** RegularExpression Id. */
  int QUOTE = 75;
  /** RegularExpression Id. */
  int LEFT_PARAN = 76;
  /** RegularExpression Id. */
  int RIGHT_PARAN = 77;
  /** RegularExpression Id. */
  int LEFT_BRAKET = 78;
  /** RegularExpression Id. */
  int RIGHT_BRAKET = 79;
  /** RegularExpression Id. */
  int LEFT_BRACE = 80;
  /** RegularExpression Id. */
  int RIHGT_BRACE = 81;
  /** RegularExpression Id. */
  int PLUS_PLUS = 82;
  /** RegularExpression Id. */
  int MINUS_MINUS = 83;
  /** RegularExpression Id. */
  int LEFT_SHIFT = 84;
  /** RegularExpression Id. */
  int RIGHT_SHIFT = 85;
  /** RegularExpression Id. */
  int LE = 86;
  /** RegularExpression Id. */
  int GE = 87;
  /** RegularExpression Id. */
  int PLUS_EQ = 88;
  /** RegularExpression Id. */
  int MINUS_EQ = 89;
  /** RegularExpression Id. */
  int TIMES_EQ = 90;
  /** RegularExpression Id. */
  int DIV_EQ = 91;
  /** RegularExpression Id. */
  int EQ = 92;
  /** RegularExpression Id. */
  int OR_EQ = 93;
  /** RegularExpression Id. */
  int MOD_EQ = 94;
  /** RegularExpression Id. */
  int AND_EQ = 95;
  /** RegularExpression Id. */
  int CARROT_EQ = 96;
  /** RegularExpression Id. */
  int OR = 97;
  /** RegularExpression Id. */
  int AND = 98;
  /** RegularExpression Id. */
  int NOT_EQ = 99;
  /** RegularExpression Id. */
  int LEFT_SHIFT_EQ = 100;
  /** RegularExpression Id. */
  int RIGHT_SHIFT_EQ = 101;
  /** RegularExpression Id. */
  int LT_GT = 102;
  /** RegularExpression Id. */
  int COLON_EQ = 103;
  /** RegularExpression Id. */
  int IDENTIFIER = 104;
  /** RegularExpression Id. */
  int DIGIT = 105;
  /** RegularExpression Id. */
  int LETTER = 106;
  /** RegularExpression Id. */
  int CHARACTER = 107;
  /** RegularExpression Id. */
  int UNICODE_CHAR = 108;
  /** RegularExpression Id. */
  int UNICODE_CHARS = 109;
  /** RegularExpression Id. */
  int SYMBOL = 110;
  /** RegularExpression Id. */
  int SPACE = 111;
  /** RegularExpression Id. */
  int STRING = 112;
  /** RegularExpression Id. */
  int UNICODE_CHARS_STRINGS = 113;
  /** RegularExpression Id. */
  int COMMENT_INLINE = 114;
  /** RegularExpression Id. */
  int COMMENT_BLK = 115;
  /** RegularExpression Id. */
  int START_COMMENT = 116;
  /** RegularExpression Id. */
  int START_COMMENT_BLK = 117;
  /** RegularExpression Id. */
  int END_COMMENT_BLK = 118;
  /** RegularExpression Id. */
  int UNICODE_CHARS_INLINE = 119;
  /** RegularExpression Id. */
  int UNICODE_CHARS_BLK = 120;
  /** RegularExpression Id. */
  int BLK_CMMT_SKIP = 121;
  /** RegularExpression Id. */
  int INLINE_CMMT_SKIP = 122;
  /** RegularExpression Id. */
  int EOL = 123;
  /** RegularExpression Id. */
  int INTEGER = 124;
  /** RegularExpression Id. */
  int ONE_TO_NINE = 125;
  /** RegularExpression Id. */
  int SIGN = 126;
  /** RegularExpression Id. */
  int REAL = 127;
  /** RegularExpression Id. */
  int HEX = 128;
  /** RegularExpression Id. */
  int HEX_LETTERS = 129;
  /** RegularExpression Id. */
  int SI = 130;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<IGNORE>",
    "\"abstract\"",
    "\"goto\"",
    "\"default\"",
    "\"do\"",
    "\"synchronized\"",
    "\"package\"",
    "\"assert\"",
    "\"if\"",
    "\"private\"",
    "\"this\"",
    "\"boolean\"",
    "\"double\"",
    "\"implements\"",
    "\"protected\"",
    "\"throw\"",
    "\"break\"",
    "\"else\"",
    "\"import\"",
    "\"public\"",
    "\"throws\"",
    "\"byte\"",
    "\"enum\"",
    "\"case\"",
    "\"return\"",
    "\"instanceof\"",
    "\"extends\"",
    "\"int\"",
    "\"for\"",
    "\"short\"",
    "\"true\"",
    "\"catch\"",
    "\"false\"",
    "\"interface\"",
    "\"static\"",
    "\"try\"",
    "\"char\"",
    "\"final\"",
    "\"transient\"",
    "\"long\"",
    "\"strictfp\"",
    "\"void\"",
    "\"native\"",
    "\"class\"",
    "\"finally\"",
    "\"super\"",
    "\"volatile\"",
    "\"const\"",
    "\"float\"",
    "\"new\"",
    "\"switch\"",
    "\"while\"",
    "\"continue\"",
    "\"null\"",
    "\"~\"",
    "\"!\"",
    "\"@\"",
    "\"%\"",
    "\"^\"",
    "\"&\"",
    "\"*\"",
    "\"-\"",
    "\"+\"",
    "\"=\"",
    "\"|\"",
    "\"/\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\"<\"",
    "\">\"",
    "\",\"",
    "\".\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"++\"",
    "\"--\"",
    "\"<<\"",
    "\">>\"",
    "\"<=\"",
    "\">=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"==\"",
    "\"|=\"",
    "\"%=\"",
    "\"&=\"",
    "\"^=\"",
    "\"||\"",
    "\"&&\"",
    "\"!=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"<>\"",
    "\":=\"",
    "<IDENTIFIER>",
    "<DIGIT>",
    "<LETTER>",
    "<CHARACTER>",
    "<UNICODE_CHAR>",
    "<UNICODE_CHARS>",
    "<SYMBOL>",
    "<SPACE>",
    "<STRING>",
    "<UNICODE_CHARS_STRINGS>",
    "<COMMENT_INLINE>",
    "<COMMENT_BLK>",
    "\"//\"",
    "\"/*\"",
    "\"*/\"",
    "<UNICODE_CHARS_INLINE>",
    "<UNICODE_CHARS_BLK>",
    "<BLK_CMMT_SKIP>",
    "<INLINE_CMMT_SKIP>",
    "\"\\n\"",
    "<INTEGER>",
    "<ONE_TO_NINE>",
    "<SIGN>",
    "<REAL>",
    "<HEX>",
    "<HEX_LETTERS>",
    "<SI>",
  };

}
