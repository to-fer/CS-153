options {
    BUILD_PARSER=false;
    IGNORE_CASE=false;
    DEBUG_TOKEN_MANAGER=false;
    LOOKAHEAD=1;
}

PARSER_BEGIN(Java)
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.File;

public class Java {}
PARSER_END(Java)

TOKEN_MGR_DECLS : {
    public static void main(String[] args) throws IOException
    {
	  byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
	  String content = new String(encoded, StandardCharsets.UTF_8);
        java.io.StringReader sr = new java.io.StringReader(content);
        SimpleCharStream scs = new SimpleCharStream(sr);
        JavaTokenManager mgr = new JavaTokenManager(scs);

		while (mgr.getNextToken().kind != EOF) {}
    }
}



SKIP : {
    <IGNORE : [" ", "\n", "\t", "\r"]>
   | <"//" (~["\n"])* ("\n"|"\r")? >
   | <"/*" > : ML_COMMENT
}

<ML_COMMENT> SKIP :
{  <"*/" >: DEFAULT
  |<~[]>
}

TOKEN : {
	//All the key words 
    <ABSTRACT : "abstract">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <GOTO : "goto">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <DEAFAULT : "default" >
    { debugStream.println("DEFAULT token: " + matchedToken.image); }
    | <DO : "do">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <SYNCHRONIZED : "synchronized">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <PACKAGE : "package">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <ASSERT : "assert">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <IF : "if">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <PRIVATE : "private">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <THIS : "this">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <BOOLEAN : "boolean">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <DOUBLE : "double">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <IMPLEMENTS : "implements">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <PROTECTED : "protected">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <THROW : "throw">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <BREAK : "break">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <ELSE : "else">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <IMPORT : "import">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <PUBLIC : "public">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <THROWS : "throws">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <BYTE : "byte">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <ENUM : "enum">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CASE : "case">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <RETURN : "return">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INSTANCEOF : "instanceof">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <EXTENDS : "extends">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INT : "int">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FOR : "for">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <SHORT : "short">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <TRUE : "true">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CATCH : "catch">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FALSE : "false">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INTERFACE : "interface">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <STATIC : "static">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <TRY : "try">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CHAR : "char">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FINAL : "final">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <TRANSIENT : "transient">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <LONG : "long">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <STRICTFP : "strictfp">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <VOID : "void">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <NATIVE : "native">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CLASS : "class">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FINALLY : "finally">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <SUPER : "super">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <VOLATILE : "volatile">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CONST : "const">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FLOAT : "float">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <NEW : "new">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <SWITCH : "switch">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <WHILE : "while">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CONTINUE : "continue">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
	| <NULL : "null">
	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }

	//ALL Symbol tokens
	| <TILDA : "~">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <NOT : "!">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <AT : "@">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <MOD : "%">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <CARROT : "^">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <AMPRSAND : "&">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <MUL : "*">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <MINUS : "-">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <PLUS : "+">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <SINGLE_EQ : "=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <BAR : "|">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <DIV : "/">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <COLON : ":">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <SEMICOLON : ";">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <QM : "?">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LT : "<">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <GT : ">">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <COMMA : ",">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <DOT : ".">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <SINGLE_QUOTE : "'">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <QUOTE : "\"">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LEFT_PARAN : "(">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <RIGHT_PARAN : ")">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LEFT_BRAKET : "[">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <RIGHT_BRAKET : "]">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LEFT_BRACE : "{"> 
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <RIHGT_BRACE : "}">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <PLUS_PLUS : "++">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <MINUS_MINUS : "--">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LEFT_SHIFT : "<<">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <RIGHT_SHIFT : ">>">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LE : "<=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <GE : ">=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <PLUS_EQ : "+=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <MINUS_EQ : "-=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <TIMES_EQ : "*=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <DIV_EQ : "/=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <EQ : "==">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <OR_EQ : "|=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <MOD_EQ : "%=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <AND_EQ : "&=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <CARROT_EQ : "^=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <OR : "||">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <AND : "&&">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <NOT_EQ : "!=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LEFT_SHIFT_EQ : "<<=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <RIGHT_SHIFT_EQ : ">>=">
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <LT_GT : "<>" >
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }
	| <COLON_EQ : ":=" >
	{ debugStream.println("SYMBOL token: " + matchedToken.image); }

	//All word tokens AKA IDENTIFIERS
	| <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> | "_")*>
      { debugStream.println("IDENTIFIER token: " + matchedToken.image); }
	| <#DIGIT  : ["0"-"9"]>
	  	//A-Z only if ignore case option is false
	| <#LETTER : ["a"-"z","A"-"Z"]>

	//ALL CHARACTER TOKENS 
	| <CHARACTER : <SINGLE_QUOTE> <UNICODE_CHAR> <SINGLE_QUOTE> >
     { debugStream.println("CHARACTER token: " + matchedToken.image); }
	| <#UNICODE_CHAR: (<LETTER> | <DIGIT> | <SYMBOL>)>
	| <#UNICODE_CHARS: (<LETTER> | <DIGIT> | <SYMBOL>)*>
	
	| <#SYMBOL: ["\\", "*", "/", ".", "'", ",", "!"] >
	| <#SPACE: [" ", "\n"] >
	
		//ALL STRING TOKENS 
	| <STRING : <QUOTE> <UNICODE_CHARS_STRINGS> <QUOTE> >
     { debugStream.println("STRING token: " + matchedToken.image); }
	| <#UNICODE_CHARS_STRINGS: (<LETTER> | <DIGIT> | <SYMBOL> | <SPACE>)*>
	
	//All Numbers
	| <INTEGER: (<SIGN>)? (<DIGIT>)+ | (<ONE_TO_NINE> (<DIGIT>)+) >
     { debugStream.println("INTEGER TOKEN: " + matchedToken.image); }
    |<#ONE_TO_NINE: ["1"-"9"] >
	| <#SIGN: "-" | "+" >
	| <REAL: (<SIGN>)? (<DIGIT>)+ "." |  "." (<DIGIT>)+ | (<SIGN>)? (<DIGIT>)+ "." (<DIGIT>)+ >
     { debugStream.println("REAL TOKEN: " + matchedToken.image); }
	| <HEX: "0" <INTEGER> | "0" "x" (<HEX_LETTERS> | <DIGIT> )+ ("E" (<DIGIT>)+)? >
     { debugStream.println("HEX TOKEN: " + matchedToken.image); }
	| <#HEX_LETTERS: ["A"-"F","a"-"f", "E"] >
	| <SI: (<INTEGER>|<REAL>) ("e"|"E") <INTEGER> >
     { debugStream.println("SI TOKEN: " + matchedToken.image); }
	
}
