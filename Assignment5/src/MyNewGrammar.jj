options {
    BUILD_PARSER=false;
    IGNORE_CASE=true;
    DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(HelloWorld)
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.File;

    public class HelloWorld {}
PARSER_END(HelloWorld)

TOKEN_MGR_DECLS : {
    public static void main(String[] args) throws IOException
    {
	  byte[] encoded = Files.readAllBytes(Paths.get(args[0]));
	  String content = new String(encoded, StandardCharsets.UTF_8);
        java.io.StringReader sr = new java.io.StringReader(content);
        SimpleCharStream scs = new SimpleCharStream(sr);
        HelloWorldTokenManager mgr = new HelloWorldTokenManager(scs);

        for (Token t = mgr.getNextToken(); t.kind != EOF; t = mgr.getNextToken()) {
            debugStream.println("Found token: " + t.image);
        }
    }
}


SKIP : {
    <IGNORE : [" ", "\n", "\t"]>
}

TOKEN : {
	//All the key words 
    <ABSTRACT : "abstract">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <GOTO : "goto">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <DEAFAULT : "default" >
    { debugStream.println("DEFAULT token: " + matchedToken.image); }
    | <DO : "do">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <SYNCHRONIZED : "synchronized">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <PACKAGE : "package">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
    | <ASSERT : "assert">
    { debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <IF : "if">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <PRIVATE : "private">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <THIS : "this">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <BOOLEAN : "boolean">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <DOUBLE : "double">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <IMPLEMENTS : "implements">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <PROTECTED : "protected">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <THROW : "throw">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <BREAK : "break">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <ELSE : "else">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <IMPORT : "import">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <PUBLIC : "public">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <THROWS : "throws">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <BYTE : "byte">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <ENUM : "enum">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CASE : "case">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <RETURN : "return">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INSTANCEOF : "instanceof">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <EXTENDS : "extends">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INT : "int">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FOR : "for">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <SHORT : "short">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <TRUE : "true">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CATCH : "catch">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FALSE : "false">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <INTERFACE : "interface">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <STATIC : "static">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <TRY : "try">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CHAR : "char">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FINAL : "final">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <TRANSIENT : "transient">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <LONG : "long">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <STRICTFP : "strictfp">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <VOID : "void">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <NATIVE : "native">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CLASS : "class">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FINALLY : "finally">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <SUPER : "super">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <VOLATILE : "volatile">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CONST : "const">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <FLOAT : "float">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <NEW : "new">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <SWITCH : "switch">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <WHILE : "while">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
 	| <CONTINUE : "continue">
 	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }
	| <NULL : "null">
	{ debugStream.println("RESERVED_WORD token: " + matchedToken.image); }

	//ALL Symbol tokens
}